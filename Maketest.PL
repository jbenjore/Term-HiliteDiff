#!perl -w
use strict;

# Generate these tests
my @test_scripts = (
    {
        program  => 'watch',
        template => 't/20watch.tmpl',
        test     => 't/20watch.t',
    },
    {
        program  => 'hilite_diff',
        template => 't/20hilite_diff.tmpl',
        test     => 't/20hilite_diff.t',
    },
);

# Read the ur-script
$/ = undef;
my $ur_source_code = <DATA>;


for my $test ( @test_scripts ) {
    my $template_source_code = $ur_source_code;

    # Macros
    $template_source_code =~ s/FUNCTION/$test->{program}/g;
    $template_source_code =~ s/INFILE/@{[__FILE__]}/g;
    $template_source_code =~ s/TMPLFILE/$test->{template}/g;
    $template_source_code =~ s/OUTFILE/$test->{test}/g;

    # Create t/20${...}.tmpl template program
    open FH, "> $test->{template}"
	or die "Can't open $test->{template} for writing: $!";
    print FH $template_source_code
	or die "Can't write to $test->{template}: $!";
    close FH
	or die "Can't write to $test->{template}: $!";

    # Create t/20${...}.t test program
    my $command = "$^X $test->{template} > $test->{test}";
    system $command;
    if ( $? ) {
	my $exitcode  = $? >> 8;
	my $signal_no = $? & 127;
	my $core      = $? & 128;

	my $message = "Command \"$command\" failed: $exitcode";
	if ( $signal_no ) {
	    $message .= ". Signal $signal_no";
	}
	if ( $core ) {
	    $message .= ". Core dumped";
	}

	die $message;
    }

    # Success! We've generated a t/20${...}.t test file
}

__DATA__
#!perl -w
# This script is generated by INFILE and its output generates the OUTFILE file.
use strict;
use blib;
use Term::HiliteDiff qw( FUNCTION );

# Create some input
my $input = 'x' x 3;
$input .= "\n";
$input x= 3;
my $count_spaces = $input =~ tr/x/x/;

my @diffs;
for my $nth (
    reverse
    1 .. $count_spaces
) {

    my $name = "FUNCTION $nth";

    my $this = $input;

    # Skip forward N 'x's.
    $this =~ /x/g while $nth--;

    # Splat an X at that 'x'
    substr $this, $-[0], 1, 'X';

    # Remove the trailing, unmodified part
    $this =~ s/(?:x+\n)+\z//;

    # Get the difference
    my $diff = FUNCTION( $this );

    # Package the in/out
    $this =~ s/\n/\\n/g;
    $diff =~ s/\n/\\n/g;
    $diff =~ s/\e/\\e/g;

    push @diffs, { in => $this, out => $diff, name => $name };
}

print "#!perl -w
# This script is automatically generated by TMPLFILE
use Test::More tests => @{[ 6 * @diffs ]};
use Term::HiliteDiff qw( FUNCTION );

"
    or die "Can't write to stdout: $!";

for my $diff ( @diffs ) {
    print qq{is( FUNCTION("$diff->{out}"), "$diff->{in}", "function $diff->{name}" );\n}
        or die "Can't write to stdout: $!";
}

print "for ( 1 .. 5 ) {
    my \$obj = Term::HiliteDiff->new();
"
    or die "Can't write to stdout: $!";

for my $diff ( @diffs ) {
    print qq{    is( \$obj->FUNCTION("$diff->{in}"), "$diff->{out}", "oo $diff->{name}" );\n}
        or die "Can't write to stdout: $!";
}

print "}\n"
    or die "Can't write to stdout: $!";
